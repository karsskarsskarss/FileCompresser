// 241RDB214 Artemijs Terlanovs
// 241RDB216 Asnate Riceva
// 211REC029 Arturs JƒÅnis Karss

import java.io.FileInputStream;
import java.io.*;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Scanner;



public class Main {


	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String choiseStr;
		String sourceFile, resultFile, firstFile, secondFile;
		
		loop: while (true) {
			
			choiseStr = sc.next();
								
			switch (choiseStr) {
			case "comp":
				System.out.print("source file name: ");
				sourceFile = sc.next();
				System.out.print("archive name: ");
				resultFile = sc.next();
				comp(sourceFile, resultFile);
				break;
			case "decomp":
				System.out.print("archive name: ");
				sourceFile = sc.next();
				System.out.print("file name: ");
				resultFile = sc.next();
				decomp(sourceFile, resultFile);
				break;
			case "size":
				System.out.print("file name: ");
				sourceFile = sc.next();
				size(sourceFile);
				break;
			case "equal":
				System.out.print("first file name: ");
				firstFile = sc.next();
				System.out.print("second file name: ");
				secondFile = sc.next();
				System.out.println(equal(firstFile, secondFile));
				break;
			case "about":
				about();
				break;
			case "exit":
				break loop;
			}
		}

		sc.close();
	}

	 public static void comp(String sourceFile, String resultFile) {
        Map<Character, Integer> letterFrequencyMap = new HashMap<>();

        try (BufferedReader br = new BufferedReader(new FileReader(sourceFile))) {
            String line;

//Izveidoju HashMap, kur glabasies faila charachters frequency
            while ((line = br.readLine()) != null) {
// Cikls lai izskanetu failu un pierakstitu katra burta biezumu
                for (char c : line.toCharArray()) {
                    letterFrequencyMap.put(c, letterFrequencyMap.getOrDefault(c, 0) + 1);
                }
            }

// Taisam Huffman koku ar ieprieks izeidoto metodi
            Node root = buildHuffmanTree(letterFrequencyMap);


// generejam huffman tree kodus.
            Map<Character, String> huffmanCodes = generateCodes(root);


    //Step 4: encode the data
            try(BufferedReader br2 = new BufferedReader(new FileReader(sourceFile));
                BufferedWriter bw = new BufferedWriter(new FileWriter(resultFile))) {
                StringBuilder encodedData = new StringBuilder();
                while ((line = br2.readLine()) != null  ){
                    for (char c : line.toCharArray()){
                        encodedData.append(huffmanCodes.get(c));
                    }
                }
            bw.write(encodedMetaDataAndData(letterFrequencyMap, encodedData.toString()));
            }



        } catch (IOException e) {
            System.out.println(e);
        }



    }  //comp metodes beigas

private static Node buildHuffmanTree(Map<Character, Integer> letterFrequencyMap) {
        PriorityQueue<Node> pq = new PriorityQueue<>();

        //itirejam cauri katram hashmap "entry" kur katrs no viniem ir kaut-kads burts ar taa attiecigo frequency un katram izveidojam jaunu "Node"
        for (Map.Entry<Character, Integer> entry : letterFrequencyMap.entrySet()) {
            pq.add(new Node(entry.getKey(), entry.getValue()));
        }

        //kamer nav viens vienigs galigs Node sasniegts, si koda dala savieno mazako frekvencu nodes un taisa vel divas ta vietaa
        while (pq.size() > 1) {
            Node left = pq.poll();
            Node right = pq.poll();
            pq.add(new Node(left.frequency + right.frequency, left, right));
        }

        return pq.poll();
    }

    static class Node implements Comparable<Node> {
        char charachter;
        int frequency;
        Node left, right;

        Node(char charachter, int frequency) {
            this.charachter = charachter;
            this.frequency = frequency;
        }

        Node(int frequency, Node left, Node right) {
            this.frequency = frequency;
            this.right = right;
            this.left = left;

        }

        @Override
        public int compareTo(Node o) {
            return this.frequency - o.frequency;
        }
    }

private static Map<Character,String> generateCodes(Node root){
    //izveidojam Hashmap lai ievietotu tur generetos kodus
    Map<Character, String> codes = new HashMap<>();
    generateCodesHelperMethod(root, "", codes);

    return codes;
}

private static void generateCodesHelperMethod(Node node, String code, Map<Character, String > codes){
        //ja tiek sasniegts node kurs ir tukss (null) tad ar to neko nedaram.
        if(node == null) return;

        //ja node nav null node, pievieno attiecigo hufman kodu tam nodam.
        if(node.charachter != '\0'){
            codes.put(node.charachter, code);
        }
        //rekursivi izsaucam so metodi lai pievienotu zara  esosajam kodam attiecigi 0 vai 1 skatoties vai tas ir labais vai kreisais zars.
        generateCodesHelperMethod(node.left, code + "0" , codes);
        generateCodesHelperMethod(node.right, code + "1" , codes);

}

//izveidojam metodi kas saglaba gan frequencyMap (biezuma tabulu) datus  gan tiesi kompreseta faila datus
private static String encodedMetaDataAndData(Map<Character, Integer> freqMap, String encodedData){
        StringBuilder metaData = new StringBuilder();

        // itirejot cauri frequencyMap tabulai, pierakstam un saglabajam tos veid kas pierakstis tos sadi:
        //  ja musu biezuma tabula butu [a=3 , b=5 , c=2] tad iekodetaja izksatisies sadi : {a:3;b:5;c:2;} un saglabajam "metaData"
        freqMap.forEach((character, frequency) -> metaData.append(character).append(":").append(frequency).append(";"));


        return metaData.toString() + "|" + encodedData;
}

	public static void decomp(String sourceFile, String resultFile) {
        try (BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(sourceFile), StandardCharsets.UTF_8));
             BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(resultFile), StandardCharsets.UTF_8))) {
    
            String line = br.readLine();
            if (line == null || !line.contains("|")) {
                throw new IOException("Invalid compressed file format. Metadata or encoded data is missing.");
            }
    
            String[] parts = line.split("\\|", 2);
            if (parts.length < 2) {
                throw new IOException("Invalid compressed file format. Missing encoded data.");
            }
            String metaData = parts[0];
            String encodedData = parts[1];
    
            Map<Character, Integer> freqMap = new HashMap<>();
            int entryCount = 0; 
            for (String entry : metaData.split(";")) {
                entryCount++;
                if (entry.isEmpty()) {
                    System.err.println("Skipping empty metadata entry at position: " + entryCount);
                    continue;
                }
    
                String[] keyValue = entry.split(":", 2);
    
                // Validate key-value pair
                if (keyValue.length != 2 || keyValue[0].isEmpty() || keyValue[1].isEmpty()) {
                    System.err.println("Skipping malformed metadata entry at position " + entryCount + ": " + entry);
                    continue;
                }
    
                try {
                    String escapedCharacter = keyValue[0];
                    int frequency = Integer.parseInt(keyValue[1]);
    
                    char character;

                    if (escapedCharacter.startsWith("\\u")) {
                        if (escapedCharacter.length() != 6) {
                            System.err.println("Skipping invalid Unicode escape sequence at position " + entryCount + ": " + escapedCharacter);
                            continue;
                        }
                        character = (char) Integer.parseInt(escapedCharacter.substring(2), 16);
                    } else if (escapedCharacter.equals("\\|")) {
                        character = '|';
                    } else if (escapedCharacter.equals("\\;")) {
                        character = ';';
                    } else if (escapedCharacter.length() == 1) {
                        character = escapedCharacter.charAt(0);
                    } else {
                        System.err.println("Skipping malformed character in metadata entry at position " + entryCount + ": " + escapedCharacter);
                        continue;
                    }
    
                    freqMap.put(character, frequency);
                } catch (NumberFormatException e) {
                    System.err.println("Skipping malformed frequency in metadata entry at position " + entryCount + ": " + entry);
                } catch (Exception e) {
                    System.err.println("Skipping malformed metadata entry at position " + entryCount + ": " + entry + " due to error: " + e.getMessage());
                }
            }
    
            if (freqMap.isEmpty()) {
                throw new IOException("Frequency map is empty. Decompression failed.");
            }

            Node root = buildHuffmanTree(freqMap);

            StringBuilder decodedData = new StringBuilder();
            Node currentNode = root;
            for (char bit : encodedData.toCharArray()) {
                currentNode = (bit == '0') ? currentNode.left : currentNode.right;

                if (currentNode.left == null && currentNode.right == null) {
                    decodedData.append(currentNode.charachter);
                    currentNode = root;
                }
            }

            bw.write(decodedData.toString());
    
        } catch (IOException e) {
            System.err.println("Error during decompression: " + e.getMessage());
        }
    }
	
	public static void size(String sourceFile) {
		try {
			FileInputStream f = new FileInputStream(sourceFile);
			System.out.println("size: " + f.available());
			f.close();
		}
		catch (IOException ex) {
			System.out.println(ex.getMessage());
		}
		
	}
	
	public static boolean equal(String firstFile, String secondFile) {
		try {
			FileInputStream f1 = new FileInputStream(firstFile);
			FileInputStream f2 = new FileInputStream(secondFile);
			int k1, k2;
			byte[] buf1 = new byte[1000];
			byte[] buf2 = new byte[1000];
			do {
				k1 = f1.read(buf1);
				k2 = f2.read(buf2);
				if (k1 != k2) {
					f1.close();
					f2.close();
					return false;
				}
				for (int i=0; i<k1; i++) {
					if (buf1[i] != buf2[i]) {
						f1.close();
						f2.close();
						return false;
					}
						
				}
			} while (!(k1 == -1 && k2 == -1));
			f1.close();
			f2.close();
			return true;
		}
		catch (IOException ex) {
			System.out.println(ex.getMessage());
			return false;
		}
	}
	
	public static void about() {
		// TODO insert information about authors
		System.out.println("241RDB214 Artemijs Terlanovs");
		System.out.println("241RDB216 Asnate Riceva");
		System.out.println("211REC029 Arturs JƒÅnis Karss ")
	}
}

